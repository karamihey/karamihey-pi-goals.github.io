{"version":3,"sources":["ts/constants/routes.ts","ts/components/Authorization/SignIn.tsx","ts/constants/forms/index.ts","ts/constants/errors.ts","ts/utils/converters.ts","ts/utils/validation.ts","ts/constants/forms/signUp.ts","ts/hooks/forms/index.ts","ts/constants/storageKeys.ts","ts/utils/exceptions.ts","ts/api/requests.ts","ts/api/user.ts","ts/utils/localStorage.ts","ts/constants/toast.ts","ts/utils/toast.ts","ts/hooks/authorization.ts","ts/hooks/forms/input.ts","ts/components/shared/Input/index.tsx","ts/components/Authorization/SignUp.tsx","ts/components/Authorization/index.tsx","ts/components/App.tsx","ts/index.tsx"],"names":["SignIn","className","FIELDS_MAX_LENGTH","FIELDS_MIN_LENGTH","VALIDATION_ERRORS","convertToString","value","toString","regExps","email","password","validateInput","isRequired","minLength","maxLength","handleValidationCallback","formattedValue","trim","validationResult","length","validateRequired","validateMinLength","validateMaxLength","test","confirmPassword","initialValuesState","initialErrorsState","useForm","formSettings","isSubmitted","settings","Object","keys","forEach","key","useState","values","setValues","errors","setErrors","isSubmitting","setSubmittingStatus","useEffect","validateField","id","validationParams","errorMessage","prevErrors","handleChange","handleSubmit","event","preventDefault","result","validate","handleValidation","fieldKey","find","RequestError","status","responseData","data","name","message","Error","baseUrl","process","REACT_APP_API_URL","contentTypes","stringifyBodyData","JSON","stringify","e","TypeError","getResponseData","response","contentType","headers","get","includes","text","json","sendRequest","a","url","options","requestUrl","requestHeaders","Headers","authToken","append","requestOptions","fetch","ok","createUser","method","body","sendPostRequest","isLocalStorageSupported","storage","window","localStorage","setItem","removeItem","error","TOAST_DEFAULT_OPTIONS","autoClose","pauseOnHover","hideProgressBar","draggable","draggablePercent","addToast","type","transition","Flip","toast","useAuth","user","setUser","signIn","console","LOCAL_STORAGE_NAMES","signUp","isUserLoggedIn","getItem","signOut","useInput","initialValue","handleChangeCallback","setValue","isValueChanged","setValueChangeStatus","isEditing","setEditingStatus","isFieldFilled","val","target","handleFocus","handleBlur","Input","props","label","errorText","labelClassName","htmlFor","onBlur","onChange","onFocus","SignUp","setSubmittedStatus","FORM_VALIDATION_SETTINGS","userData","then","signUpUser","noValidate","onSubmit","onClick","Authorization","component","exact","path","ROUTES","to","App","newestOnTop","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0bd6e8f4.chunk.js","sourcesContent":["export default {\n  authorization: '/',\n  signIn: '/sign-in',\n  signUp: '/sign-up',\n};\n","// libraries\nimport React from 'react';\n\nconst SignIn = () => (\n  <div className=\"\" />\n);\n\nexport default SignIn;\n","export const FIELDS_MAX_LENGTH = {\n  password: 16,\n};\n\nexport const FIELDS_MIN_LENGTH = {\n  password: 8,\n};\n","export const DEFAULT_ERROR = 'Something went wrong. Please try again later.';\n\nexport const VALIDATION_ERRORS = {\n  required: 'should not be blank',\n  minLength: 'must be at least',\n  maxLength: 'must be no more than ',\n  charactersLong: 'characters long',\n  email: 'is invalid',\n  password: 'must contain digits, lowercase letters, uppercase letters and a special character(s)',\n  confirmPassword: 'do not match',\n};\n","export const convertToString = (value: any) => {\n  if (!value) {\n    return '';\n  }\n\n  return value.toString();\n};\n","// types\nimport { FormControlValidationParams, FormControlValidationResultTypes } from 'types/forms';\n// constants\nimport { VALIDATION_ERRORS } from 'constants/errors';\n// utils\nimport { convertToString } from 'utils/converters';\n\nconst regExps = {\n  email: /^\\w+([.+-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,})+$/,\n  password: /^(?=.*?[a-z])(?=.*?[0-9])(?=.*[A-Z])(?=.*[.!@#$%^&*()_+=-]).+$/,\n};\n\nexport const validateRequired = (value?: string) => {\n  if (value && value.length !== 0) {\n    return false;\n  }\n\n  return VALIDATION_ERRORS.required;\n};\n\nexport const validateMinLength = (value: string, minLength: number) => {\n  if (value.length >= minLength) {\n    return false;\n  }\n\n  return `${VALIDATION_ERRORS.minLength} ${minLength} ${VALIDATION_ERRORS.charactersLong}`;\n};\n\nexport const validateMaxLength = (value: string, maxLength: number) => {\n  if (value.length <= maxLength) {\n    return false;\n  }\n\n  return `${VALIDATION_ERRORS.maxLength} ${maxLength} ${VALIDATION_ERRORS.charactersLong}`;\n};\n\nexport const validateEmail = (email?: string) => {\n  if (email && regExps.email.test(email)) {\n    return false;\n  }\n\n  return VALIDATION_ERRORS.email;\n};\n\nexport const validatePassword = (password?: string) => {\n  if (!!password && regExps.password.test(password)) {\n    return false;\n  }\n\n  return VALIDATION_ERRORS.password;\n};\n\nexport const validatePasswordConfirm = (password?: string, confirmPassword?: string) => {\n  if (password === confirmPassword) {\n    return false;\n  }\n\n  return VALIDATION_ERRORS.confirmPassword;\n};\n\nexport const validateInput = (value: string | undefined, {\n  isRequired, minLength, maxLength, handleValidationCallback,\n}: FormControlValidationParams) => {\n  let formattedValue = convertToString(value);\n  formattedValue = formattedValue.trim();\n\n  let validationResult: FormControlValidationResultTypes = '';\n\n  if (isRequired) {\n    validationResult = validateRequired(formattedValue);\n  }\n\n  if (!validationResult && minLength) {\n    validationResult = validateMinLength(formattedValue, minLength);\n  }\n\n  if (!validationResult && maxLength) {\n    validationResult = validateMaxLength(formattedValue, maxLength);\n  }\n\n  if (!validationResult && handleValidationCallback) {\n    validationResult = handleValidationCallback(formattedValue);\n  }\n\n  return validationResult;\n};\n","// constants\nimport { FIELDS_MAX_LENGTH, FIELDS_MIN_LENGTH } from 'constants/forms';\n// utils\nimport { validateEmail, validatePassword, validatePasswordConfirm } from 'utils/validation';\n\nexport default {\n  email: {\n    isRequired: true,\n    handleValidationCallback: validateEmail,\n  },\n  password: {\n    isRequired: true,\n    maxLength: FIELDS_MAX_LENGTH.password,\n    minLength: FIELDS_MIN_LENGTH.password,\n    handleValidationCallback: validatePassword,\n  },\n  confirmPassword: {\n    isRequired: true,\n    maxLength: FIELDS_MAX_LENGTH.password,\n    minLength: FIELDS_MIN_LENGTH.password,\n    handleValidationCallback: validatePasswordConfirm,\n  },\n};\n","// libraries\nimport React, { useState, useEffect } from 'react';\n// types\nimport {\n  FormValuesType, FormErrorsType, FormSettingsType, FormControlSettingsType, FormControlValueTypes,\n  FormControlValidationResultTypes,\n} from 'types/forms';\n// utils\nimport { validateInput } from 'utils/validation';\n\nconst initialValuesState: FormValuesType = {};\nconst initialErrorsState: FormErrorsType = {};\n\nconst prepareInitialState = (settings: FormSettingsType) => {\n  Object.keys(settings).forEach(key => {\n    initialValuesState[key] = '';\n    initialErrorsState[key] = '';\n  });\n};\n\nconst useForm = (formSettings: FormSettingsType, isSubmitted: boolean) => {\n  prepareInitialState(formSettings);\n\n  const [values, setValues] = useState(initialValuesState);\n  const [errors, setErrors] = useState(initialErrorsState);\n  const [isSubmitting, setSubmittingStatus] = useState(false);\n\n  useEffect(() => {\n    if (!isSubmitted) {\n      return;\n    }\n\n    setSubmittingStatus(false);\n  }, [isSubmitted]);\n\n  const validateField = (id: string, {\n    isRequired, minLength, maxLength, handleValidationCallback,\n  }: FormControlSettingsType) => {\n    const validationParams = {\n      isRequired,\n      minLength,\n      maxLength,\n      handleValidationCallback,\n    };\n\n    const validationResult = validateInput(values[id], validationParams);\n\n    const errorMessage = (validationResult && `${validationResult}.`) || '';\n\n    setErrors(prevErrors => ({\n      ...prevErrors,\n      [id]: errorMessage,\n    }));\n\n    return validationResult;\n  };\n\n  const handleValidation = (id: string) => {\n    const fieldKey = Object.keys(formSettings).find(key => key === id);\n\n    if (!fieldKey || !formSettings[fieldKey]) {\n      return false;\n    }\n\n    return validateField(fieldKey, formSettings[fieldKey]);\n  };\n\n  const validate = () => {\n    let result: FormControlValidationResultTypes = true;\n\n    Object.keys(formSettings).forEach(key => {\n      result = !validateField(key, formSettings[key]) && result;\n    });\n\n    return result;\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLButtonElement | HTMLFormElement>) => {\n    if (event) {\n      event.preventDefault();\n    }\n\n    if (isSubmitting || !validate()) {\n      return;\n    }\n\n    setSubmittingStatus(true);\n  };\n\n  const handleChange = (id: string, value: FormControlValueTypes) => {\n    setValues({\n      ...values,\n      [id]: value,\n    });\n\n    setErrors({\n      ...errors,\n      [id]: '',\n    });\n  };\n\n  return {\n    handleChange,\n    handleSubmit,\n    handleValidation,\n    values,\n    errors,\n    isSubmitting,\n  };\n};\n\nexport default useForm;\n","export default {\n  authToken: 'authToken',\n};\n","// types\nimport { ResponseBody, ResponseBodyMessage } from 'types/requests';\n\nexport class RequestError extends Error {\n  data: ResponseBody;\n\n  status: number;\n\n  name: string;\n\n  constructor(status: number, responseData: ResponseBodyMessage) {\n    super();\n\n    this.data = (responseData && responseData.message) || responseData;\n    this.status = status;\n    this.name = 'RequestError';\n  }\n}\n","// utils\nimport { RequestError } from 'utils/exceptions';\n\nconst baseUrl = process.env.REACT_APP_API_URL;\nconst contentTypes = {\n  json: 'application/json',\n  text: 'text/html',\n};\n\nconst encodeQueryData = (data: any) => {\n  if (!data) {\n    return '';\n  }\n\n  try {\n    const queryStringStart = '?';\n\n    return Object.keys(data).reduce((queryString, key, index) => {\n      const paramStringStart = index ? '&' : '';\n      const paramString = `${paramStringStart}${encodeURIComponent(key)}=${encodeURIComponent(data[key])}`;\n\n      return queryString + paramString;\n    }, queryStringStart);\n  } catch (e) {\n    throw new TypeError('Error: incorrect query data format.');\n  }\n};\n\nconst stringifyBodyData = (data: any) => {\n  if (!data) {\n    return null;\n  }\n  try {\n    return JSON.stringify(data);\n  } catch (e) {\n    throw new TypeError('Error: incorrect send data format.');\n  }\n};\n\nconst getResponseData = (response: Response) => {\n  const contentType = response.headers.get('content-type');\n\n  if (!contentType || contentType.includes(contentTypes.text)) {\n    return response.text();\n  }\n\n  if (contentType.includes(contentTypes.json)) {\n    return response.json();\n  }\n\n  throw new TypeError('Error: incorrect received data format.');\n};\n\nconst sendRequest = async (url:string = '', options = {}) => {\n  const requestUrl = baseUrl + url;\n  const requestHeaders = new Headers({\n    'Content-Type': contentTypes.json,\n  });\n\n  const authToken = null; // ToDo: get actual token.\n  if (authToken) {\n    requestHeaders.append('X-AUTH-TOKEN', authToken);\n  }\n\n  const requestOptions = {\n    headers: requestHeaders,\n    ...options,\n  };\n\n  const response: Response = await fetch(requestUrl, requestOptions);\n  const responseData = await getResponseData(response);\n\n  if (!response.ok) {\n    throw new RequestError(response.status, responseData);\n  }\n\n  return responseData;\n};\n\nexport const sendGetRequest = (url: string, data?: any) => {\n  const requestUrl = url + encodeQueryData(data);\n  const requestOptions = {\n    method: 'GET',\n  };\n\n  return sendRequest(requestUrl, requestOptions);\n};\n\nexport const sendPostRequest = (url: string, data?: any) => {\n  const requestOptions = {\n    method: 'POST',\n    body: stringifyBodyData(data),\n  };\n\n  return sendRequest(url, requestOptions);\n};\n\nexport const sendPutRequest = (url: string, data?: any) => {\n  const requestOptions = {\n    method: 'PUT',\n    body: stringifyBodyData(data),\n  };\n\n  return sendRequest(url, requestOptions);\n};\n\nexport const sendDeleteRequest = (url: string, data?: any) => {\n  const requestOptions = {\n    method: 'DELETE',\n    body: stringifyBodyData(data),\n  };\n\n  return sendRequest(url, requestOptions);\n};\n","// api\nimport { sendPostRequest, sendGetRequest } from 'api/requests';\n// types\nimport { NewUser } from 'types/user';\n\nexport const createUser = ({ email, password }: NewUser) => sendPostRequest('/users/create', {\n  email, password,\n});\n\nexport const getUsers = () => sendGetRequest('/users');\n\nexport const getUser = (id: number) => sendGetRequest(`/users/${id}`);\n","const isLocalStorageSupported = () => {\n  const testKey = 'test';\n  const storage = window.localStorage;\n\n  try {\n    storage.setItem(testKey, '1');\n    storage.removeItem(testKey);\n\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\nexport const setItem = (name: string, value: string) => localStorage.setItem(name, value);\n\nexport const getItem = (name: string) => {\n  if (!isLocalStorageSupported()) {\n    return null;\n  }\n\n  return localStorage.getItem(name);\n};\n\nexport const removeItem = (name: string) => {\n  if (!isLocalStorageSupported()) {\n    return;\n  }\n\n  localStorage.removeItem(name);\n};\n","export const TOAST_DEFAULT_OPTIONS = {\n  autoClose: 5000,\n  pauseOnHover: true,\n  hideProgressBar: true,\n  draggable: true,\n  draggablePercent: 60,\n};\n","// libraries\nimport { toast, Flip } from 'react-toastify';\n// types\nimport { ToastParams, ToastOptions } from 'types/toast';\n// constants\nimport { TOAST_DEFAULT_OPTIONS } from 'constants/toast';\n\nconst addToast = ({ text, type }: ToastParams) => {\n  const options: ToastOptions = {\n    ...TOAST_DEFAULT_OPTIONS,\n    transition: Flip,\n    type,\n  };\n\n  return toast(text, options);\n};\n\nexport const addSuccessToast = (text: string) => {\n  addToast({\n    text,\n    type: 'success',\n  });\n};\n\nexport const addWarningToast = (text: string) => {\n  addToast({\n    text,\n    type: 'warning',\n  });\n};\n\nexport const addInfoToast = (text: string) => {\n  addToast({\n    text,\n    type: 'info',\n  });\n};\n\nexport const addErrorToast = (text: string) => {\n  addToast({\n    text,\n    type: 'error',\n  });\n};\n","// libraries\nimport { useState } from 'react';\n// types\nimport { NewUser } from 'types/user';\n// constants\nimport LOCAL_STORAGE_NAMES from 'constants/storageKeys';\nimport { DEFAULT_ERROR } from 'constants/errors';\n// api\nimport { createUser } from 'api/user';\n// utils\nimport { setItem, getItem, removeItem } from 'utils/localStorage';\nimport { addErrorToast } from 'utils/toast';\n\nconst useAuth = () => {\n  const [user, setUser] = useState({});\n\n  const signIn = ({ email, password }: NewUser) => {\n    console.error('signIn', email, password);\n    setItem(LOCAL_STORAGE_NAMES.authToken, '123');\n    setUser({});\n  };\n\n  const signUp = async ({ email, password }: NewUser) => {\n    try {\n      await createUser({ email, password });\n      signIn({ email, password });\n    } catch (error) {\n      addErrorToast(DEFAULT_ERROR);\n    }\n  };\n\n  const signOut = () => {\n    removeItem(LOCAL_STORAGE_NAMES.authToken);\n    setUser({});\n  };\n\n  const isUserLoggedIn = () => getItem(LOCAL_STORAGE_NAMES.authToken);\n\n  return {\n    user,\n    isUserLoggedIn,\n    signIn,\n    signUp,\n    signOut,\n  };\n};\n\nexport default useAuth;\n","// libraries\nimport React, { useState, useEffect } from 'react';\n// types\nimport { InputComponentProps, InputValueTypes } from 'types/forms/input';\n// utils\nimport { convertToString } from 'utils/converters';\n\nconst useInput = ({\n  id, initialValue, handleChangeCallback, handleValidation,\n}: InputComponentProps) => {\n  const [value, setValue] = useState<InputValueTypes>(initialValue);\n  const [isValueChanged, setValueChangeStatus] = useState(false);\n  const [isEditing, setEditingStatus] = useState(false);\n\n  const isFieldFilled = () => {\n    const formattedValue = convertToString(value);\n\n    return formattedValue.trim().length;\n  };\n\n  const updateValidationStatus = () => {\n    handleValidation(id);\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const val = event.target.value;\n    setValue(val);\n    setValueChangeStatus(true);\n\n    if (handleChangeCallback) {\n      handleChangeCallback(id, val);\n    }\n  };\n\n  const handleFocus = () => {\n    setEditingStatus(true);\n  };\n\n  const handleBlur = () => {\n    setEditingStatus(false);\n    updateValidationStatus();\n  };\n\n  useEffect(() => {\n    if (isValueChanged || (initialValue && value && initialValue === value)) {\n      return;\n    }\n\n    setValue(initialValue || '');\n  }, [initialValue]);\n\n  return {\n    value,\n    isFieldFilled: isFieldFilled(),\n    isEditing,\n    handleChange,\n    handleFocus,\n    handleBlur,\n  };\n};\n\nexport default useInput;\n","// libraries\nimport React from 'react';\n// types\nimport { InputComponentProps } from 'types/forms/input';\n// hooks\nimport useInput from 'hooks/forms/input';\n\nconst Input = (props: InputComponentProps) => {\n  const {\n    id, label, name, type, errorText,\n  } = props;\n\n  const {\n    value, isFieldFilled, isEditing, handleChange, handleFocus, handleBlur,\n  } = useInput(props);\n\n  const labelClassName = `${(isEditing || isFieldFilled) ? 'is-shifted' : ''}`;\n\n  return (\n    <div className=\"form-control\">\n      <label\n        className={`form-control-label ${labelClassName}`}\n        htmlFor={id}\n      >\n        {label}\n      </label>\n\n      <input\n        className=\"form-field\"\n        id={id}\n        name={name}\n        onBlur={handleBlur}\n        onChange={handleChange}\n        onFocus={handleFocus}\n        type={type || 'text'}\n        value={value || ''}\n      />\n\n      {(errorText && (\n        <div className=\"form-control-error\">\n          {errorText}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Input;\n","// libraries\nimport React, { useState, useEffect } from 'react';\n// constants\nimport FORM_VALIDATION_SETTINGS from 'constants/forms/signUp';\n// hooks\nimport useForm from 'hooks/forms';\nimport useAuth from 'hooks/authorization';\n// components\nimport Input from 'components/shared/Input';\n// utils\nimport { convertToString } from 'utils/converters';\n\nconst SignUp = () => {\n  const [isSubmitted, setSubmittedStatus] = useState(false);\n\n  const {\n    values,\n    errors,\n    handleChange,\n    handleSubmit,\n    handleValidation,\n    isSubmitting,\n  } = useForm(FORM_VALIDATION_SETTINGS, isSubmitted);\n\n  const { signUp } = useAuth();\n\n  const signUpUser = () => {\n    // TODO: Check convert type is still needed\n    const userData = {\n      email: convertToString(values.email),\n      password: convertToString(values.password),\n    };\n\n    signUp(userData)\n      .then(() => {\n        setSubmittedStatus(true);\n      });\n  };\n\n  useEffect(() => {\n    if (!isSubmitting) {\n      return;\n    }\n\n    signUpUser();\n  }, [isSubmitting]);\n\n  const { email, password, confirmPassword } = FORM_VALIDATION_SETTINGS;\n\n  return (\n    <div className=\"form-container\">\n      <div className=\"title\">Sign Up</div>\n      <form noValidate onSubmit={handleSubmit}>\n        <Input\n          errorText={errors.email}\n          handleChangeCallback={handleChange}\n          handleValidation={handleValidation}\n          handleValidationCallback={email.handleValidationCallback}\n          id=\"email\"\n          initialValue={values.email}\n          isRequired={email.isRequired}\n          label=\"E-mail\"\n          name=\"email\"\n          type=\"email\"\n        />\n\n        <Input\n          errorText={errors.password}\n          handleChangeCallback={handleChange}\n          handleValidation={handleValidation}\n          handleValidationCallback={password.handleValidationCallback}\n          id=\"password\"\n          initialValue={values.password}\n          isRequired={password.isRequired}\n          label=\"Password\"\n          maxLength={password.maxLength}\n          minLength={password.minLength}\n          name=\"password\"\n          type=\"password\"\n        />\n\n        <Input\n          errorText={errors.confirmPassword}\n          handleChangeCallback={handleChange}\n          handleValidation={handleValidation}\n          // handleValidationCallback={() =>\n          // confirmPassword.handleValidationCallback(values.password, values.confirmPassword)}\n          id=\"confirm-password\"\n          initialValue={values.confirmPassword}\n          isRequired={confirmPassword.isRequired}\n          label=\"Confirm Password\"\n          maxLength={confirmPassword.maxLength}\n          minLength={confirmPassword.minLength}\n          name=\"confirm-password\"\n          type=\"password\"\n        />\n      </form>\n\n      <button className=\"button\" onClick={handleSubmit} type=\"submit\">Sign Up</button>\n    </div>\n  );\n};\n\nexport default SignUp;\n","// libraries\nimport React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\n// constants\nimport ROUTES from 'constants/routes';\n// components\nimport SignIn from 'components/Authorization/SignIn';\nimport SignUp from 'components/Authorization/SignUp';\n\nconst Authorization = () => (\n  <div className=\"authorization-pages\">\n    <Switch>\n      <Route component={SignIn} exact path={ROUTES.signIn} />\n      <Route component={SignUp} exact path={ROUTES.signUp} />\n\n      <Redirect to={ROUTES.signIn} />\n    </Switch>\n  </div>\n);\n\nexport default Authorization;\n","// libraries\nimport React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport { ToastContainer } from 'react-toastify';\n// constants\nimport ROUTES from 'constants/routes';\n// components\nimport Authorization from 'components/Authorization';\n\nconst App = () => (\n  <div className=\"App\">\n    <Switch>\n      <Route component={Authorization} path={ROUTES.authorization} />\n    </Switch>\n\n    <ToastContainer newestOnTop />\n  </div>\n);\n\nexport default App;\n","// polyfills\nimport 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\n// libraries\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n// components\nimport App from 'components/App';\n// styles\nimport 'scss/index.scss';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}